process.executor = 'local'

// Define the required input parameters
params.organism = "mus_musculus"
params.census_version = "2024-07-01" // version of cellxgene census scvi model and data corpus for reference data
params.cutoff = 0 // do not threshold class probabilities 
params.seed = 42
params.subsample_ref = 50
params.studies_dir = "/space/scratch/gemma-single-cell-data-ensembl-id/mus_musculus"
params.ref_collections = ["A taxonomy of transcriptomic cell types across the isocortex and hippocampal formation"]
params.outdir = "$projectDir/results/${params.organism}_subsample_ref_${params.subsample_ref}"  // Directory where outputs will be saved

process {
  cache = 'standard'  // Options: 'standard' (default), 'deep', 'lenient', or 'false'

  withName:runSetup {
    container = "raschwaa/census_pipeline:latest"
    conda = '/home/rschwartz/anaconda3/envs/scanpyenv'
  }

  withName:processQuery {
    container = "raschwaa/census_pipeline:latest"
    conda = '/home/rschwartz/anaconda3/envs/scanpyenv'
  }

  withName:getCensusAdata {
    container = "raschwaa/census_pipeline:latest"
    conda = '/home/rschwartz/anaconda3/envs/scanpyenv'
  }

  withName:rfClassify {
    container = "raschwaa/census_pipeline:latest"
    conda = '/home/rschwartz/anaconda3/envs/scanpyenv'
  }
}

nextflow {
  clean {
    afterRun = true  // Default is false; set to true to clean up automatically
   // workDir = ''
   // logFile = 

  }
}

profiles {
  conda {
    conda.enabled = true
  }

  singularity {
    singularity.enabled = true
    autoMounts = true
  }
}

