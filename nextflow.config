manifest {
    homePage = 'https://github.com/PavlidisLab/sc-annotation-pipeline'
    description = 'Nextflow pipeline designed to automatically annotate cell types from single-cell data loaded into the Gemma database.'
    mainScript = 'main.nf'
    version = '1.1.0'
}

params.run_download = false
params.studies_path = "/home/rxiang/rachelpipeline/human/"
params.gene_mapping = "$projectDir/meta/gemma_genes.tsv"
params.original_celltype_columns = "$projectDir/meta/author_cell_annotations/original_celltype_columns.tsv"
params.author_annotations_path = "$projectDir/meta/author_cell_annotations"
params.nmads=5
params.version = "$manifest.version"
process.executor = 'local'
params.GEMMA_USERNAME = System.getenv('GEMMA_USERNAME')
params.GEMMA_PASSWORD = System.getenv('GEMMA_PASSWORD')
params.study_names = "study_names.txt"
// Define the required input parameters
params.organism = "mus_musculus"
params.restricted_celltypes = ["unknown", "neuron"]
params.census_version = "2024-07-01" // version of cellxgene census scvi model and data corpus for reference data
params.cutoff = 0 // do not threshold class probabilities 
params.seed = 42
params.subsample_ref = 50
params.ref_collections = [
        "A taxonomy of transcriptomic cell types across the isocortex and hippocampal formation",
        "An integrated transcriptomic and epigenomic atlas of mouse primary motor cortex cell types",
        "Adult mouse cortical cell taxonomy revealed by single cell transcriptomics",
        "Tabula Muris Senis",
        "Single-cell transcriptomics characterization of oligodendrocytes and microglia in white matter aging"
    ]
params.outdir = "$projectDir/results/${params.organism}_subsample_ref_${params.subsample_ref}_${java.time.LocalDateTime.now().format(java.time.format.DateTimeFormatter.ofPattern('yyyy-MM-dd_HH-mm-ss'))}"
params.organ="brain"
params.multiqc_config = "$projectDir/meta/multiqc_config.yaml"
params.markers_file = "$projectDir/meta/cell_type_markers.tsv"

process {
  cache = 'standard'  // Options: 'standard' (default), 'deep', 'lenient', or 'false'
  executor = 'local'

  withName:runSetup {
    container = "raschwaa/census_pipeline:latest"
    conda = '/home/rschwartz/anaconda3/envs/scanpyenv'
    // conda = '/space/grp/Pipelines/sc-annotation-pipeline/envs/cell-annotation-python-test'
  }

  withName:processQuery {
    container = "raschwaa/census_pipeline:latest"
    conda = '/home/rschwartz/anaconda3/envs/scanpyenv'
   // conda = '/space/grp/Pipelines/sc-annotation-pipeline/envs/cell-annotation-python-test'
  }

  withName:getCensusAdata {
    container = "raschwaa/census_pipeline:latest"
    conda = '/home/rschwartz/anaconda3/envs/scanpyenv'
    // conda = '/space/grp/Pipelines/sc-annotation-pipeline/envs/cell-annotation-python-test'
  }

  withName:rfClassify {
    container = "raschwaa/census_pipeline:latest"
    conda = '/home/rschwartz/anaconda3/envs/scanpyenv'
   // conda = '/space/grp/Pipelines/sc-annotation-pipeline/envs/cell-annotation-python-test'
  }


 withName:plotQC {
   container = "raschwaa/census_pipeline:latest"
   conda = '/home/rschwartz/anaconda3/envs/scanpyenv'
 }

 withName:runMultiQC {
  container = "raschwaa/census_pipeline:latest"
  conda = '/home/rschwartz/anaconda3/envs/scanpyenv'
 }

 withName:getMeta {
  conda = '/home/rschwartz/anaconda3/envs/scanpyenv'
 }
}

nextflow {
  clean {
    afterRun = true  // Default is false; set to true to clean up automatically
    // workDir = ''
   // logFile = 

  }
}

profiles {
  conda {
    conda.enabled = true
  }

  singularity {
    singularity.enabled = true
    autoMounts = true
  }
}

// executor {
 // queueSize = 20 
// }